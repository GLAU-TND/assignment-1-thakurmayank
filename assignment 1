first
package adt;
public interface ContactsADT<E>{
    boolean addContact(E item);
    void viewContacts();
    void searchInContacts(String name);
    boolean deleteFromContacts(int index);
}
second
package definition;
import adt.ContactsADT;
import java.time.period;
importjava.util.ArrayList;
public class ListOfContacts<E> implements ContactsADT<E>{
    ArrayList listName = new ArrayList<String>();
    ArrayList listNameFirstName = new ArrayList<String>();
    private Node<E> head;
    private int size = 0;
    private int counter =0;
    privte void addFirst(E data){
        head = new Node<>((Person) data,head);
        size++;
    }
    private void addAfter(Node <E> node,E data){
          node.next = new Node<>((Person) data , node.next);
          size++;
    }
    public int getSize(){
          return size;
   }     
   public void addContact(int index, E data){
          if(index<0 || index>size){
              throw new IndexOutOfBoundsException(Integer.toString(index));
          }    
          elseif(size == 0){
              addFirst(data);
          }
          else{
               Node<E> count = getNode(index - 1);
               addAfter(count,data);
          }
   }     
   private void setName(String contactFirstName , String contactLastName){
          listName.add(contactFirstName+ " " + contactLastName);
   }
   public ArrayList getListName() {
          return listName;
   }
   public boolean addContact(E data) {
          addContact(size,data);
          return false;
   }
   private Person deleteFromContactsFirst(){
          Person response = null;
          Node<E> count = head;
          if(head != null){
              head=head.getNext();
                      }
           if(count!=null){
              size--;
              response = count.getData();
           }
           return response;
   }
   private Person deleteFromContactsAfter(Node<E> node){
           Person response = null;
           Node<E> count = node.getNext();
           
           if(count != null){
              node.next = count.getNext();
              size--;
              response = count.getData();
           }
           if (count == null){
               node = null;
               size--;
           }
           return response;
   }
   public void viewContacts(){
           if(size!=0){
              System.out.println("here all your contacts");
              for(int i=0;i<size;i++){
                    person data = this.getNode(i).getData();
                    System.out.println(data);
              }
           }  
           else{
              System.out.println("No Contact Added yet");
           }
   }      
   public void searchInContacts(String name){
           for(int i=0;i<listNameFirstName.size();i++){
              if(name.compareTo(listNameFirstName.get(i).toString())==0){
                 Node <E> personNode=getNode(i);
                 System.out.println(personNode.getdata().toString());
              } 
           }
           if(counter!=0){
              System.out.println(counter +"match found!");
              For(int i=0;i<listNameFirstName.size();i++){
              for (int i = 0; i <listNameFirstName.size();i++){
                if (name.compareTo(listNameFirstName.get(i).toString())==0){
                    Node <E> personNode=getNode(i);
                    System.out.println(personNode.getData().toString());
                }

            }
        }
        else {
            System.out.println("NO RESULTS FOUND!");
        }

    }

    @Override
    public boolean deleteFromContacts(int index) {
        boolean response=false;
        if (index-1<0 || (index-1>getSize())){
            throw new IndexOutOfBoundsException(Integer.toString(index-1));
        }

        else if (index-1==0){
            deleteFromContactsFirst();
            listName.remove(index-1);
            response=true;
        }
        else {
            Node<E> lastNode= getNode(index-1);
            deleteFromContactsAfter(lastNode);
            listName.remove(index-1);
            response = true;
        }
        return response;
    }

    public void setFirstNameInList(String name) {
        listNameFirstName.add(name);
    }

    public ArrayList getArrayOfFirstName() {
        return listNameFirstName;
    }

    private static class Node<E>{
        private Person data;
        private Node<E> next;

        private Node(Person data , Node<E> next){
            this.data = data;
            this.next = next;
            }
        private Person getData() {
            return data;
        }
        private void setData(Person data) {
            this.data = data;
        }
        private Node<E> getNext() {
            return next;
        }
        private void setNext(Node<E> next) {
            this.next = next;
        }

    }
}
              
package main;

import definition.ListOfContacts;
import definition.Person;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ListOfContacts listOfContactsObj = new ListOfContacts();
        String contactFirstName;
        String contactLastName;
        String[] contactNumber = new String[5];
        String emailOfContact = new String();
        boolean ctr;
        while (ctr = true) {
            System.out.println("Welcome to Shivam's Contact List App");
            System.out.println("Press 1 to add a new contact\n" + "Press 2 to view all contacts\n" +
                    "Press 3 to search for a contact\n" + "Press 4 to delete a contact\n" + "Press 5 to exit program ");

            int choice = scanner.nextInt();
            scanner.nextLine();
            switch (choice) {
                case 1:
                    System.out.println("You have chosen to add a new contact: \n" + "Please enter the name of the Person");
                    System.out.println("First Name:");
                    contactFirstName = scanner.nextLine();
                    System.out.println("Last Name:");
                    contactLastName = scanner.nextLine();
                    listOfContactsObj.setName(contactFirstName, contactLastName);
                    listOfContactsObj.setFirstNameInList(contactFirstName);
                    System.out.println("Contact Number:");
                    contactNumber[0] = scanner.nextLine();
                    for (int i = 1; i <= 4; i++) {
                        System.out.println("Would you like to add another contact number?");
                        char response = scanner.next().charAt(0);
                        if (response == 'y') {
                            contactNumber[i] = scanner.next();
                        } else {
                            break;
                        }
                    }
                         System.out.println("Email Address:");
                         emailOfContact = scanner.next();
                         Person person = new Person(contactFirstName, contactLastName, contactNumber, emailOfContact);
                         listOfContactsObj.addContact(person);
                           break;
                case 2:
                     listOfContactsObj.viewContacts();
                     break;
                case 3:
                      System.out.println("You could search for a contact from their first name: ");
                      String name = scanner.next();
                      listOfContactsObj.searchInContacts(name);
                      break;
                case 4:
                      for (int i = 0; i < listOfContactsObj.getArrayOfFirstName().size(); i++) {
                      System.out.println((i + 1) + ". " + listOfContactsObj.getArrayOfFirstName().get(i));
                      }
                      System.out.println("Press the number against the contact to delete it: ");
                      int number = scanner.nextInt();
                      String temp = listOfContactsObj.getArrayOfFirstName().get(number - 1).toString();
                      listOfContactsObj.deleteFromContacts(number);
                      System.out.println(temp + "'s contact deleted from list!");
                      break;
                case 5:
                      System.out.println("Exited Succesfully");
                      ctr = false;
                      break;
                default:
                      System.out.println("Please Enter a Valid Input");
                      break;

                        }
                    }
            }
        }
           
                 
